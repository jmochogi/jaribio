{
  "hash": "033a5384bd03ef219e35ef09e56569b0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ncategories: \"Lab\"\nexecute:\n  eval: true\nformat:\n  html:\n    code-link: true #Supposed to create a link to documentation but its not, for some reason.\n   # code-block-bg: true # \"lightblue\" Does not work well with dark mode.\n    code-block-border-left: \"#31BAE9\"\n    code-fold: show #also try true OR false and decide if you like it.\n    code-tools: false\n    code-copy: true\n---\n\n\n\n\n# `Hello, World!` {.unnumbered}\n\nIt is possible that some of you have heard/seen the phrase, `Hello, World!`, before. That is usually the first thing you learn in programming, i.e., to learn to write a computer program to print this sentence to screen.\nIn this lab, we will not print `Hello, World!` to the screen. Instead, we will learn how to use R (via RStudio) to perform statistical analyses and to write reports in order to communicate the insights learned from data. While the analysis involves writing computer code, it is in no way going to involve writing computer programs.\nThe goal of today's lab is to introduce you to R and RStudio. You will learn to access and use RStudio, as well as perform the basic functions regarding statistical analysis.\nTo clarify which is which: R is the name of the programming language itself and RStudio is a convenient interface (Integrated Development Environment or IDE) for working with R.\nI like to think about R as the car engine and RStudio as a nice driver dashboard. The engine drives the car, but the dashboard makes it easier for the driver to control the car.\nMost R users work with RStudio.\n\n![Car Engine and Dashboard](images/r_vs_rstudio.png)\n\nWe will work with the cloud (online) version of RStudio.\nTo access RStudio online, click on the link <https://posit.cloud> to create an account or to sign in if you already have an account.\n\n## Creating a new Project\n\nAfter signing in to R studio, our next step is to create a new project.\nYou can think of a project as a folder or simply a collection of files. Our project will be called \"MATH 246 Fall 2024\". Each lab that you complete will be saved in this project.\nTo create the project, you start by clicking on \"New Project\" and then change the default name (UNTITLED PROJECT) to \"MATH 246 Fall 2024\".\n\nYay!\nYou now have your project ready.\nIn the next section, we explain the meaning of the various panels on your screen.\n\n## The R studio Interface\n\nYour new R studio project interface will look as follows:\n\n![](images/a1.jpeg)\n\n-   ***Left Panel:*** The panel on the left is where the action happens.\n    This panel is called the console.\n    Every time you launch RStudio, it will have the same text at the top of the console telling you the version of R that you're running.\n    Below that information is the symbol \" \\> \".\n    This is where you enter your commands.\n    When you enter and execute a command, the output will come right below it.\n    These commands and their syntax have evolved over decades (literally) and now provide what many users feel is a fairly natural way to access data, organize, describe, and invoke statistical computations.\n    Try typing 1 + 1 in the console and hit enter.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    1+1\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n-   ***Upper Right Panel:*** The panel in the upper right is called \"environment\". It contains, among other things, the history of the actions or commands that you've previously entered.\n\n-   ***Bottom Right Panel:*** The panel in the lower right contains tabs for browsing the files in your project folder, access help files for R functions, install and manage R packages, and inspecting visualizations through the viewer tab.\n    By default, all data visualizations you make will appear directly below the code you used to create them.\n    If you would rather your plots appear in the plots tab, you will need to change your global options.\n\n## R packages\n\nR is an open-source programming language, meaning that users can contribute packages that make our lives easier, and we can use them for free.\nPackages are simply pre-written code meant to serve specific purposes and may contain other packages inside them.\nPackages may also contain data sets.\nPackages are stored in a directory called \"Library\".\nFor this lab, and many others in the future, we will use the following two packages:\n\n-   The **tidyverse package** is a very popular \"umbrella\" package which houses a suite of many different R packages: for data wrangling (including tidying) and data visualization.\n\n-   The **openintro package** for data and custom functions with the OpenIntro resources.\n    You will notice that the readings frequently refer to data contained in the OpenIntro Package.\n    This is the package.\n\n### Installing packages\n\nThe command to install a package in R takes the following format:\n\n```         \ninstall.packages(\"package name\")\n```\n\nTo install **tidyverse** and **openintro**, run the following commands:\n\n``` toml\ninstall.packages(\"tidyverse\")\ninstall.packages(\"openintro\")\n```\n\nNote: You only need to install packages **once**, but you need to load them each time you relaunch RStudio.\nTo call load (activate) the above installed packages, you use the following command:\n\n``` toml\nlibrary(tidyverse)\nlibrary(openintro)\n```\n\n***Why Tidyverse?*** We are choosing to use the tidyverse package collection because it consists of a set of packages necessary for different aspects of working with data, anything from loading data to wrangling data to visualizing data to analyzing data.\nAdditionally, these packages share common philosophies and are designed to work together.\nYou can find more about the packages in the tidyverse at tidyverse.org.\n\n## Creating vectors in R\n\nSuppose we want to find the mean of the numbers 23,24,26,19,18,25,21, and 39.\nThe first thing you want to do is to get these data into R. We can achieve this by running the code below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(23,24,26,19,18,25,21, 39) \n# We use the symbol <- for assigning elements to an object. \n```\n:::\n\n\n\n\nHere, we are creating a vector (a series of numbers) and storing it in an object called x. The symbols `<-` is used for assignment.\nIn R, we use a \\# to designate a ***comment*** (text that should not be evaluated as code).\nIn above chunk, the text after \\# is a comment. Comments are a good way to document your code.\n\nTo find the mean of those numbers, we simply run the command `mean(x)` as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24.375\n```\n\n\n:::\n:::\n\n\n\nThe general format is `do_this(on_this)`. Here, `do_this` is the function while `x` is the thing on which we want an action taken. \n\nTo find the median of the numbers, we run the command `median(x)` as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23.5\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can also create a `string object` (i.e., a series of non-numerical elements or characters). We use quotes for string characters.\nSee below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c( \"Jane\", \"John\", \"Jess\", \"Jeff\", \"Joe\", \"Holli\", \"Henry\", \"Han\") \n# We use quotes for strings.\n```\n:::\n\n\n\n\nNow, try to run the command **mean(y)**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(y): argument is not numeric or logical: returning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\nWhat do you get?\nProgramming languages generally produce error messages when you try to perform an inappropriate operation or if there is a mistake in the code. Error messages are a good way to learn what you did wrong.\nIn this case, the mean/average of the object `y` does not make sense because the entries of `y` are not numerical.\n\n\nYou can, however, perform other operations on y.\nFor example, you may want to know how many `Jane` entries are in y. To do this, you may simply tabulate the entries in y as shown below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n  Han Henry Holli  Jane  Jeff  Jess   Joe  John \n    1     1     1     1     1     1     1     1 \n```\n\n\n:::\n:::\n\n\n\nWe see that there is only one `Jane` entry in y. While you could easily count the number of `Jane` entries in y, the `table` function is useful when you have many entries and you want to know how many times each entry appears.\n\nBefore we proceed, delete (or comment out) the `mean(y)` that you had written earlier.\n\n\n## Creating Data Frames\n\nYou can create a `data frame` by combining vectors of equal length.\nBefore we do that, let us create two more vectors (a numeric one and a character one).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-c(3,3,2,2,3,4,1,2)\n\nb<-c(\"F\", \"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"M\")\n```\n:::\n\n\n\n\nYou can combine the vectors a, b, c, x, and y into a data frame as follows.\nWe store this in an object called practice_data and then print it.\nNote that we use an underscore to separate the words **practice** and **data** in the name.\nDo not use a blank space for object or variable names.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npractice_data <- data.frame(name=y, age=x, sex=b, year=a)\nprint (practice_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name age sex year\n1  Jane  23   F    3\n2  John  24   M    3\n3  Jess  26   F    2\n4  Jeff  19   M    2\n5   Joe  18   M    3\n6 Holli  25   F    4\n7 Henry  21   M    1\n8   Han  39   M    2\n```\n\n\n:::\n:::\n\n\n\n\nNotice that the data frame looks like a more natural way that you are likely to encounter data.\nMost of the time, data is collected and stored in excel and can be imported into R for use.\nThroughout the labs, we will learn how to import data from various sources into R.\n\n## Using Data Frames\n\nWe can run various statistics from data frames.\nBecause the data frame combines many vectors (variables) we need to specify the data frame name and the variable we are targeting.\nFor example, to find the mean of age, we write the data frame name and variable name separated by a dollar sign as follows `mean(practice_data$age)`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(practice_data$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24.375\n```\n\n\n:::\n:::\n\n\n\n\nYou can also find other statistics.\nFor median, the command is `median(data$variable)`.\nFor standard deviation, the command is `sd(data$variable)`.\n\nYou can also run multiple summary statistics at once using the command `summary(median(data$variable))`.\nSee below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(practice_data$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  18.00   20.50   23.50   24.38   25.25   39.00 \n```\n\n\n:::\n:::\n\n\n\n\nThe summary command give you the minimum value, first quartile, median, mean, third quartile and maximum value.\n\n## Basic Visualizations\n\nYou can create basic plots in base R:\n\n### Scatter plots:\n\nTo create a scatter plot to visualize the relationship between age and year, you can use the code below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(practice_data$age, practice_data$year)\n```\n\n::: {.cell-output-display}\n![](Lab_0_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n### Bar plots\n\nTo create a bar plot to visualize the distribution of M and F, you can use the command below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(table((practice_data$sex)))\n```\n\n::: {.cell-output-display}\n![](Lab_0_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n## Exercises\n\n1)  Create an object (name it income) containing the following numerical elements: 750, 810, 680, 1200, 1500, 1399,1525.\n\n2)  Find the mean of the values in #1 above.\n\n3)  Create another object with names of your choosing and then combine it with the first object to make a data frame called **my_data**.\n\n4)  Run the summary statistics for the income variable using **my_data** data frame that you created in #3 above.\n\n5)  R comes with many pre-loaded data frames.\n    One such data frame is called `mtcars`.\n    Run the command `?mtcars` to learn more about this data frame.\n    Next, load this data frame into your work space by running the command `data(mtcars)`.\n\n6)  Use the mtcars data frame to find the median horsepower of the cars.\n\n7)  Create a histogram to visualize the distribution of the variable `hp`.\n    What can you say about the distribution of hp based on the histogram?\n",
    "supporting": [
      "Lab_0_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}